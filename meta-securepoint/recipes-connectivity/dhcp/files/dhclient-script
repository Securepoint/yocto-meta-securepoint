#!/bin/sh
# dhclient-script for Linux. Stripped to the bare minimum.
#
# GT: alias handling looks weird if you ask me

ip=/sbin/ip
CMD_PREFIX=/usr/bin/ip6_prefix

# Must be used on exit. Invokes the local dhcp client exit hooks, if any.
exit_with_hooks() {
  exit_status=$1
  if [ -f /etc/dhclient-exit-hooks ]; then
    . /etc/dhclient-exit-hooks
  fi
  # probably should do something with exit status of the local script
  exit $exit_status
}

handle_new_routers() {
  for router in $new_routers
  do
    if [ "$new_subnet_mask" = "255.255.255.255" ]
    then
      ${ip} -4 route add ${router} dev $interface
    fi
    # give spnetd a hint
    sproutehint ${interface} ${router}
  done
}

ipv4_config() {
  if [ -n "$new_broadcast_address" ]; then
    new_broadcast_arg="broadcast $new_broadcast_address"
  fi
  if [ -n "$new_subnet_mask" ]; then
    new_mask="/$new_subnet_mask"
  fi
  ${ip} -4 addr replace ${new_ip_address}${new_mask} ${new_broadcast_arg} \
    valid_lft "${new_dhcp_lease_time}" preferred_lft "${new_dhcp_lease_time}" \
    dev ${interface} label ${interface} 2>/dev/null

  # set MTU
  if [ -n "$new_interface_mtu" ]; then
    ip link set dev ${interface} mtu ${new_interface_mtu}
  fi
}

syslog() {
  if [ -n "$1" ]; then
    logger -t dhclient-script "$@"
  fi
}

# Invoke the local dhcp client enter hooks, if they exist.
if [ -f /etc/dhclient-enter-hooks ]; then
  exit_status=0
  . /etc/dhclient-enter-hooks
  # allow the local script to abort processing of this state
  # local script must set exit_status variable to nonzero.
  if [ $exit_status -ne 0 ]; then
    exit $exit_status
  fi
fi

if [ -n "$alias_subnet_mask" ]; then
    alias_mask="/$alias_subnet_mask"
fi


case "${reason}" in
  MEDIUM|ARPCHECK|ARPSEND)
    # nix
    ;;

  PREINIT)
    if [ -n "$alias_ip_address" ]; then
      # Bring down alias interface. Its routes will disappear too.
      ${ip} -4 addr flush dev ${interface} label ${interface}:0
    fi
    ${ip} link set dev ${interface} up

    # We need to give the kernel some time to get the interface up.
    sleep 1
    ;;

  BOUND|RENEW|REBIND|REBOOT)
    
    if [ -n "$old_ip_address" ] && [ -n "$alias_ip_address" ] && [ "$alias_ip_address" != "$old_ip_address" ]
    then
      # Possible new alias. Remove old alias.
      ${ip} -4 addr flush dev ${interface} label ${interface}:0
    fi

    if [ -n "$old_ip_address" ] && [ "$old_ip_address" != "$new_ip_address" ]
    then
      # IP address changed. Bringing down the interface will delete all routes,
      # and clear the ARP cache.
      ${ip} -4 addr flush dev ${interface} label ${interface}
    fi

    ipv4_config
    
    if [ -z "$old_ip_address" ] || \
       [ "$old_ip_address" != "$new_ip_address" ] || \
       [ "$reason" = "BOUND" ]  || \
       [ "$reason" = "REBOOT" ]
    then
      handle_new_routers
    else
      # REBIND | RENEW

      # we haven't changed the address, have we changed other options           
      # that we wish to update?
      if [ -n "$new_routers" ] && [ "$new_routers" != "$old_routers" ]
      then
        # if we've changed routers delete the old and add the new.
        for router in $old_routers; do
          ${ip} -4 route del via $router
        done
        handle_new_routers
      fi
    fi
    
    if [ "$new_ip_address" != "$alias_ip_address" ] && [ -n "$alias_ip_address" ]
    then
      ${ip} -4 addr flush dev ${interface} label ${interface}:0
      ${ip} -4 addr add ${alias_ip_address}${alias_mask} dev ${interface} label ${interface}:0
      ${ip} -4 route add ${alias_ip_address} dev ${interface}
    fi
    ;;

  EXPIRE|FAIL|RELEASE|STOP)

    if [ -n "$alias_ip_address" ]; then
      # Turn off alias interface.
      ${ip} -4 addr flush dev ${interface} label ${interface}:0
    fi
    if [ -n "$old_ip_address" ]; then
      # Shut down interface, which will delete routes and clear arp cache.
      ${ip} -4 addr flush dev ${interface} label ${interface}
    fi
    if [ -n "$alias_ip_address" ]; then
      ${ip} -4 addr add ${alias_ip_address}${alias_network_arg} \
          dev ${interface} label ${interface}:0
      ${ip} -4 route add ${alias_ip_address} dev ${interface}
    fi
    ;;

  TIMEOUT)
    
    if [ -n "$alias_ip_address" ]; then
      ${ip} -4 addr flush dev ${interface} label ${interface}:0
    fi

    ipv4_config

    set $new_routers
    if ping -q -c 1 -I "${interface}" "${1}"; then
      if [ "$new_ip_address" != "$alias_ip_address" ] && [ -n "$alias_ip_address" ]
      then
        ${ip} -4 addr add ${alias_ip_address}${alias_mask} \
              dev ${interface} label ${interface}:0
        ${ip} -4 route add ${alias_ip_address} dev ${interface}
      fi
      handle_new_routers
      exit_with_hooks 0
    fi
    ${ip} -4 addr flush dev ${interface}
    exit_with_hooks 1
    ;;

  PREINIT6)

    # Ensure interface is up.
    ${ip} link set ${interface} up
    # Remove any stale addresses from aborted clients.
    ${ip} -6 addr flush dev ${interface} scope global permanent
    ;;
  
  BOUND6|RENEW6|REBIND6|DEPREF6)

    if [ -n "${old_ip6_prefix}" ] || [ -n "${new_ip6_prefix}" ] ; then
      echo Prefix ${reason} old=${old_ip6_prefix} new=${new_ip6_prefix}

      ## inform spnetd about new delegated prefix
      ${CMD_PREFIX} "${new_ip6_prefix}"
      exit_with_hooks 0
    fi

    case "${reason}" in
      BOUND6)
        if [ -z "${new_ip6_address}" ] || [ -z "${new_ip6_prefixlen}" ] ; then
          exit_with_hooks 2;
        fi

        ${ip} -6 addr add ${new_ip6_address}/${new_ip6_prefixlen} \
	  dev ${interface} scope global
        ;;

      RENEW6|REBIND6)
        if [ -n "${new_ip6_address}" ] && [ -n "${new_ip6_prefixlen}" ] ; then
          ${ip} -6 addr add ${new_ip6_address}/${new_ip6_prefixlen} \
	    dev ${interface} scope global
        fi
        ;;
      
      DEPREF6)
        if [ -z "${new_ip6_prefixlen}" ] ; then
          exit_with_hooks 2;
        fi

        ${ip} -6 addr change ${new_ip6_address}/${new_ip6_prefixlen} \
          dev ${interface} scope global preferred_lft 0

        ;;
      esac
      ;;

    EXPIRE6|RELEASE6|STOP6)
      if [ -n "${old_ip6_prefix}" ]; then

        echo "Prefix ${old_ip6_prefix} $reason"
        ## remove delegated prefix
        ${CMD_PREFIX} ""
      fi

      if [ -z "${old_ip6_address}" ] || [ -z "${old_ip6_prefixlen}" ] ; then
        exit_with_hooks 2;
      fi

      ${ip} -6 addr del ${old_ip6_address}/${old_ip6_prefixlen} \
	    dev ${interface}
      ;;
esac

exit_with_hooks 0
