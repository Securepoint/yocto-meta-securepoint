diff --git a/lib/tls/mbedtls/mbedtls-client.c b/lib/tls/mbedtls/mbedtls-client.c
index 519483e7..a6582c1b 100644
--- a/lib/tls/mbedtls/mbedtls-client.c
+++ b/lib/tls/mbedtls/mbedtls-client.c
@@ -95,7 +95,7 @@ lws_ssl_client_bio_create(struct lws *wsi)
 			alpn_comma = hostname;
 	}
 
-	lwsl_info("%s: %s: client conn sending ALPN list '%s'\n",
+	lwsl_debug("%s: %s: client conn sending ALPN list '%s'\n",
 		  __func__, lws_wsi_tag(wsi), alpn_comma);
 
 	protos.len = (uint8_t)lws_alpn_comma_to_openssl(alpn_comma, protos.data,
@@ -173,7 +173,7 @@ lws_ssl_client_bio_create(struct lws *wsi)
 
 		/* no wrapper api for check key */
 
-		lwsl_notice("%s: set system client cert %u\n", __func__,
+		lwsl_debug("%s: set system client cert %u\n", __func__,
 				wsi->sys_tls_client_cert - 1);
 	}
 
@@ -204,7 +204,7 @@ lws_tls_client_connect(struct lws *wsi, char *errbuf, size_t elen)
 #if defined(LWS_WITH_TLS_SESSIONS)
 		lws_tls_session_new_mbedtls(wsi);
 #endif
-		lwsl_info("client connect OK\n");
+		lwsl_debug("client connect OK\n");
 		return LWS_SSL_CAPABLE_DONE;
 	}
 
@@ -289,7 +289,7 @@ lws_tls_client_confirm_peer_cert(struct lws *wsi, char *ebuf, size_t ebuf_len)
 	}
 #endif
 	if (wsi->tls.use_ssl & avoid) {
-		lwsl_info("%s: allowing anyway\n", __func__);
+		lwsl_debug("%s: allowing anyway\n", __func__);
 
 		return 0;
 	}
@@ -363,11 +363,11 @@ lws_tls_client_create_vhost_context(struct lws_vhost *vh,
 		}
 		vh->tls.x509_client_CA = d2i_X509(NULL, buf, (long)len);
 		free(buf);
-		lwsl_info("Loading client CA for verification %s\n", ca_filepath);
+		lwsl_debug("Loading client CA for verification %s\n", ca_filepath);
 #endif
 	} else {
 		vh->tls.x509_client_CA = d2i_X509(NULL, (uint8_t*)ca_mem, (long)ca_mem_len);
-		lwsl_info("%s: using mem client CA cert %d\n",
+		lwsl_debug("%s: using mem client CA cert %d\n",
 			    __func__, ca_mem_len);
 	}
 
@@ -392,7 +392,7 @@ lws_tls_client_create_vhost_context(struct lws_vhost *vh,
 		    (info->options & LWS_SERVER_OPTION_IGNORE_MISSING_CERT))
 			return 0;
 
-		lwsl_notice("%s: doing cert filepath %s\n", __func__,
+		lwsl_debug("%s: doing cert filepath %s\n", __func__,
 				cert_filepath);
 
 		if (alloc_file(vh->context, cert_filepath, &buf, &amount))
@@ -410,7 +410,7 @@ lws_tls_client_create_vhost_context(struct lws_vhost *vh,
 			return 1;
 		}
 
-		lwsl_info("Loaded client cert %s\n", cert_filepath);
+		lwsl_debug("Loaded client cert %s\n", cert_filepath);
 #endif
 	} else if (cert_mem && cert_mem_len) {
 		/* lwsl_hexdump_notice(cert_mem, cert_mem_len - 1); */
@@ -422,7 +422,7 @@ lws_tls_client_create_vhost_context(struct lws_vhost *vh,
 			lws_tls_err_describe_clear();
 			return 1;
 		}
-		lwsl_info("%s: using mem client cert %d\n",
+		lwsl_debug("%s: using mem client cert %d\n",
 			    __func__, cert_mem_len);
 	}
 
@@ -432,7 +432,7 @@ lws_tls_client_create_vhost_context(struct lws_vhost *vh,
 		uint8_t *buf;
 		lws_filepos_t amount;
 
-		lwsl_notice("%s: doing private key filepath %s\n", __func__,
+		lwsl_debug("%s: doing private key filepath %s\n", __func__,
 				private_key_filepath);
 		if (alloc_file(vh->context, private_key_filepath, &buf, &amount))
 			return 1;
@@ -450,7 +450,7 @@ lws_tls_client_create_vhost_context(struct lws_vhost *vh,
 			return 1;
 		}
 
-		lwsl_notice("Loaded private key %s\n", private_key_filepath);
+		lwsl_debug("Loaded private key %s\n", private_key_filepath);
 #endif
 	} else if (key_mem && key_mem_len) {
 		/* lwsl_hexdump_notice(cert_mem, cert_mem_len - 1); */
@@ -463,7 +463,7 @@ lws_tls_client_create_vhost_context(struct lws_vhost *vh,
 			lws_tls_err_describe_clear();
 			return 1;
 		}
-		lwsl_info("%s: using mem private key %d\n",
+		lwsl_debug("%s: using mem private key %d\n",
 			    __func__, key_mem_len);
 
 	}
