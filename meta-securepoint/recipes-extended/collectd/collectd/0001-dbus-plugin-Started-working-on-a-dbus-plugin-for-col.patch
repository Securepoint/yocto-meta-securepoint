From 5d76d515ed4b34d536fde2c2d81ac7592be1b6e4 Mon Sep 17 00:00:00 2001
From: Gernot Tenchio <gernot.tenchio@securepoint.de>
Date: Mon, 16 Aug 2021 12:12:33 +0200
Subject: [PATCH] added dbus plugin

---
 Makefile.am            |  15 +++-
 configure.ac           |   8 ++
 src/collectd-dbus.conf |  14 +++
 src/dbus.c             | 199 +++++++++++++++++++++++++++++++++++++++++
 4 files changed, 235 insertions(+), 1 deletion(-)
 create mode 100644 src/collectd-dbus.conf
 create mode 100644 src/dbus.c

diff --git a/Makefile.am b/Makefile.am
index 00947da0..db147343 100644
--- a/Makefile.am
+++ b/Makefile.am
@@ -74,7 +74,8 @@ EXTRA_DIST = \
 	src/valgrind.FreeBSD.suppress \
 	src/valgrind.suppress \
 	testwrapper.sh \
-	version-gen.sh
+	version-gen.sh \
+	src/collectd-dbus.conf
 
 
 dist_man_MANS = \
@@ -948,6 +949,14 @@ dbi_la_LDFLAGS = $(PLUGIN_LDFLAGS) $(BUILD_WITH_LIBDBI_LDFLAGS)
 dbi_la_LIBADD = $(BUILD_WITH_LIBDBI_LIBS)
 endif
 
+if BUILD_PLUGIN_DBUS
+pkglib_LTLIBRARIES += dbus.la
+dbus_la_SOURCES = src/dbus.c
+dbus_la_CFLAGS = $(AM_CFLAGS) $(LIBDBUS1_CFLAGS)
+dbus_la_LDFLAGS = $(PLUGIN_LDFLAGS)
+dbus_la_LIBADD = $(LIBDBUS1_LIBS)
+endif
+
 if BUILD_PLUGIN_DCPMM
 pkglib_LTLIBRARIES += dcpmm.la
 dcpmm_la_SOURCES = src/dcpmm.c
@@ -2437,11 +2446,15 @@ install-exec-hook:
 	$(INSTALL) -m 0644 $(srcdir)/src/types.db $(DESTDIR)$(cpkgdatadir)/types.db;
 	$(INSTALL) -m 0644 $(srcdir)/src/postgresql_default.conf \
 		$(DESTDIR)$(cpkgdatadir)/postgresql_default.conf;
+	$(mkinstalldirs) $(DESTDIR)/etc/dbus-1/system.d
+	$(INSTALL) -m 0644 $(srcdir)/src/collectd-dbus.conf \
+		$(DESTDIR)/etc/dbus-1/system.d/org.collectd.Notifications.conf
 
 uninstall-hook:
 	rm -f $(DESTDIR)$(cpkgdatadir)/types.db;
 	rm -f $(DESTDIR)$(sysconfdir)/collectd.conf
 	rm -f $(DESTDIR)$(cpkgdatadir)/postgresql_default.conf;
+	rm -f $(DESTDIR)/etc/dbus-1/system.d/org.collectd.Notifications.conf
 
 all-local: @PERL_BINDINGS@
 
diff --git a/configure.ac b/configure.ac
index bcfb8cf5..ff1fbb15 100644
--- a/configure.ac
+++ b/configure.ac
@@ -6387,6 +6387,11 @@ PKG_CHECK_MODULES([LIBRIEMANN_CLIENT], [riemann-client >= 1.6.0],
  [with_libriemann_client="no (pkg-config doesn't know libriemann-client)"]
 )
 
+PKG_CHECK_MODULES([LIBDBUS1], [dbus-1],
+		[with_libdbus1="yes"],
+		[with_libdbus1="no (pkg-config doesn't know libdbus1)"]
+)
+
 # Check for enabled/disabled features
 #
 
@@ -7059,6 +7064,7 @@ AC_PLUGIN([curl],                [$with_libcurl],             [CURL generic web
 AC_PLUGIN([curl_json],           [$plugin_curl_json],         [CouchDB statistics])
 AC_PLUGIN([curl_xml],            [$plugin_curl_xml],          [CURL generic xml statistics])
 AC_PLUGIN([dbi],                 [$with_libdbi],              [General database statistics])
+AC_PLUGIN([dbus],                [$with_libdbus1],            [DBus notifications])
 AC_PLUGIN([dcpmm],               [$with_libpmwapi],           [Intel(R) Optane(TM) DC Persistent Memory performance and health statistics])
 AC_PLUGIN([df],                  [$plugin_df],                [Filesystem usage statistics])
 AC_PLUGIN([disk],                [$plugin_disk],              [Disk usage statistics])
@@ -7405,6 +7411,7 @@ AC_MSG_RESULT([    libaquaero5 . . . . . $with_libaquaero5])
 AC_MSG_RESULT([    libatasmart . . . . . $with_libatasmart])
 AC_MSG_RESULT([    libcurl . . . . . . . $with_libcurl])
 AC_MSG_RESULT([    libdbi  . . . . . . . $with_libdbi])
+AC_MSG_RESULT([    libdbus . . . . . . . $with_libdbus])
 AC_MSG_RESULT([    libdpdk . . . . . . . $with_libdpdk])
 AC_MSG_RESULT([    libesmtp  . . . . . . $with_libesmtp])
 AC_MSG_RESULT([    libganglia  . . . . . $with_libganglia])
@@ -7506,6 +7513,7 @@ AC_MSG_RESULT([    curl  . . . . . . . . $enable_curl])
 AC_MSG_RESULT([    curl_json . . . . . . $enable_curl_json])
 AC_MSG_RESULT([    curl_xml  . . . . . . $enable_curl_xml])
 AC_MSG_RESULT([    dbi . . . . . . . . . $enable_dbi])
+AC_MSG_RESULT([    dbus  . . . . . . . . $enable_dbus])
 AC_MSG_RESULT([    dcpmm  . . . . . .  . $enable_dcpmm])
 AC_MSG_RESULT([    df  . . . . . . . . . $enable_df])
 AC_MSG_RESULT([    disk  . . . . . . . . $enable_disk])
diff --git a/src/collectd-dbus.conf b/src/collectd-dbus.conf
new file mode 100644
index 00000000..0e9ce1bf
--- /dev/null
+++ b/src/collectd-dbus.conf
@@ -0,0 +1,14 @@
+<!DOCTYPE busconfig PUBLIC
+ "-//freedesktop//DTD D-BUS Bus Configuration 1.0//EN"
+ "http://www.freedesktop.org/standards/dbus/1.0/busconfig.dtd">
+<busconfig>
+	<policy user="root">
+		<allow own="org.collectd.Notifications"/>
+		<allow send_destination="org.collectd.Notifications"/>
+	</policy>
+	<policy context="default">
+                <deny own="org.collectd.Notifications"/>
+                <deny send_destination="org.collectd.Notifications"/>
+        </policy>
+</busconfig>
+
diff --git a/src/dbus.c b/src/dbus.c
new file mode 100644
index 00000000..cbb71a7f
--- /dev/null
+++ b/src/dbus.c
@@ -0,0 +1,199 @@
+/**
+ * collectd - src/dbus.c
+ * Copyright (C) 2016       Gernot Tenchio
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License as published by the
+ * Free Software Foundation; only version 2 of the License is applicable.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA
+ *
+ * Authors:
+ *   Gernot Tenchio <gernot at tenchio.de>
+ **/
+
+#include "collectd.h"
+
+#include "utils/common/common.h"
+#include "plugin.h"
+
+#include <dbus/dbus.h>
+
+#define PLUGNAME "dbus plugin"
+#define PLUG_PATH "/org/collectd/Notifications"
+#define PLUG_INTERFACE "org.collectd.Notifications"
+
+#define log_info(...) INFO (PLUGNAME ": " __VA_ARGS__)
+#define log_warn(...) WARNING (PLUGNAME ": " __VA_ARGS__)
+#define log_error(...) ERROR (PLUGNAME ": " __VA_ARGS__)
+/*
+ * Private data types
+ */
+struct dbus_cdata_s
+{
+  DBusConnection *connection;
+  char *path;
+  char *interface;
+};
+typedef struct dbus_cdata_s dbus_cdata_t;
+
+/*
+ * Private variables
+ */
+static dbus_cdata_t cdata = {};
+
+static dbus_bool_t dbus_append_property(DBusMessageIter *dict, char *name, char type, const void *value) /* {{{ */
+{
+  DBusMessageIter __entry, __value;
+  char signature[2] = { type, '\0' };
+  dbus_bool_t ret = FALSE;
+
+  if (FALSE == dbus_message_iter_open_container (dict, DBUS_TYPE_DICT_ENTRY, NULL, &__entry)) {
+    /* */
+  } else if (FALSE == dbus_message_iter_append_basic (&__entry, DBUS_TYPE_STRING, &name)) {
+    /* */
+  } else if (FALSE == dbus_message_iter_open_container (&__entry, DBUS_TYPE_VARIANT, signature, &__value)) {
+    /* */
+  } else if (FALSE == dbus_message_iter_append_basic (&__value, type, type == DBUS_TYPE_STRING ? &value : value)) {
+    /* */
+  } else {
+    ret = TRUE;
+    dbus_message_iter_close_container (&__entry, &__value);
+    dbus_message_iter_close_container (dict, &__entry);
+  }
+  return ret;
+} /* dbus_bool_t dbus_append_property }}} */
+
+static dbus_bool_t dbus_append_meta(DBusMessageIter *dict, const notification_t *n) /* {{{ */
+{
+  notification_meta_t *meta = n->meta;
+
+  while (NULL != meta) {
+    char type;
+    void *value;
+    switch (meta->type) {
+      case NM_TYPE_STRING:
+        type = DBUS_TYPE_STRING;
+        value = (void *)meta->nm_value.nm_string;
+        break;
+      case NM_TYPE_SIGNED_INT:
+        type = DBUS_TYPE_INT32;
+        value = &meta->nm_value.nm_signed_int;
+        break;
+      case NM_TYPE_UNSIGNED_INT:
+        type = DBUS_TYPE_UINT32;
+        value = &meta->nm_value.nm_unsigned_int;
+        break;
+      case NM_TYPE_BOOLEAN:
+        type = DBUS_TYPE_BOOLEAN;
+        value = &meta->nm_value.nm_boolean;
+        break;
+      case NM_TYPE_DOUBLE:
+        type = DBUS_TYPE_DOUBLE;
+        value = &meta->nm_value.nm_double;
+        break;
+      default:
+        return FALSE;
+    }
+    dbus_append_property(dict, meta->name, type, value);
+    meta = meta->next;
+  }
+  return TRUE;
+} /* dbus_bool_t dbus_append_meta }}} */
+
+static int plug_dbus_init (void) /* {{{ */
+{
+  int ret = -1;
+  DBusError error;
+
+  dbus_error_init (&error);
+  if (NULL == (cdata.connection = dbus_bus_get (DBUS_BUS_SYSTEM, &error)))
+  {
+    log_error("failed to open connection to system message bus: %s.", error.message);
+    dbus_error_free (&error);
+  }
+  else if (DBUS_REQUEST_NAME_REPLY_PRIMARY_OWNER != dbus_bus_request_name (cdata.connection, PLUG_INTERFACE, DBUS_NAME_FLAG_REPLACE_EXISTING, &error))
+  {
+    log_error("failed to request a bus name on system message bus: %s.", error.message);
+    dbus_error_free (&error);
+  }
+  else ret = 0;
+
+  return (ret);
+} /* int dbus_int }}} */
+
+static int plug_dbus_notification (const notification_t *n, /* {{{ */
+    user_data_t __attribute__((unused)) *user_data)
+{
+  int ret = -1;
+  DBusMessage *message;
+
+  if (NULL == (message = dbus_message_new_signal (PLUG_PATH, PLUG_INTERFACE, "Notification"))) {
+    log_error("couldn't allocate D-Bus message");
+  } else {
+    DBusMessageIter iter, dict;
+    char *severity = (NOTIF_FAILURE == n->severity) ? "FAILURE"
+	      : (NOTIF_WARNING == n->severity) ? "WARNING"
+	      : (NOTIF_OKAY == n->severity) ? "OKAY" : "UNKNOWN";
+    char *signature = DBUS_DICT_ENTRY_BEGIN_CHAR_AS_STRING DBUS_TYPE_STRING_AS_STRING
+                      DBUS_TYPE_VARIANT_AS_STRING DBUS_DICT_ENTRY_END_CHAR_AS_STRING;
+    dbus_message_iter_init_append (message, &iter);
+
+    if (FALSE == dbus_message_iter_open_container(&iter, DBUS_TYPE_ARRAY, signature, &dict)) {
+      log_error("couldn't append severity");
+    } else if (FALSE == dbus_append_property (&dict, "severity", DBUS_TYPE_STRING, severity)) {
+      log_error("couldn't append severity");
+    } else if (FALSE == dbus_append_property (&dict, "time", DBUS_TYPE_UINT64, &n->time)) {
+      log_error("couldn't append time");
+    } else if (FALSE == dbus_append_property (&dict, "message", DBUS_TYPE_STRING, n->message)) {
+      log_error("couldn't append message");
+    } else if (FALSE == dbus_append_property (&dict, "host", DBUS_TYPE_STRING, n->host)) {
+      log_error("couldn't append host");
+    } else if (FALSE == dbus_append_property (&dict, "plugin", DBUS_TYPE_STRING, n->plugin)) {
+      log_error("couldn't append plugin");
+    } else if (FALSE == dbus_append_property (&dict, "instance", DBUS_TYPE_STRING, n->plugin_instance)) {
+      log_error("couldn't append plugin_instance");
+    } else if (FALSE == dbus_append_property (&dict, "type", DBUS_TYPE_STRING, n->type)) {
+      log_error("couldn't append type");
+    } else if (FALSE == dbus_append_property (&dict, "type_instance", DBUS_TYPE_STRING, n->type_instance)) {
+      log_error("couldn't append type");
+    } else if (FALSE == dbus_append_meta (&dict, n)) {
+      log_error("couldn't append meta");
+    } else if (FALSE == dbus_message_iter_close_container(&iter, &dict)) {
+      log_error("couldn't close container");
+    } else if (FALSE == dbus_connection_send (cdata.connection, message, NULL)) {
+      log_error("couldn't send message");
+    } else {
+      dbus_connection_flush (cdata.connection);
+      ret = 0;
+    }
+    dbus_message_unref (message);
+  }
+  return (ret);
+} /* int dbus_notification }}} */
+
+static int plug_dbus_shutdown (void) /* {{{ */
+{
+  dbus_bus_release_name (cdata.connection, PLUG_INTERFACE, NULL);
+  dbus_connection_unref (cdata.connection);
+  return 0;
+} /* int dbus_shutdown }}} */
+
+void module_register (void)
+{
+  plugin_register_init ("dbus", plug_dbus_init);
+  plugin_register_notification ("dbus", plug_dbus_notification,
+      /* user_data = */ NULL);
+  plugin_register_shutdown ("dbus", plug_dbus_shutdown);
+} /* void module_register */
+
+/*
+ * vim:shiftwidth=2:softtabstop=2:tabstop=8:fdm=marker
+ */
-- 
2.31.1

