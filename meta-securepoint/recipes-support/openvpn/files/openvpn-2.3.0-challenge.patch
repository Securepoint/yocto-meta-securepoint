diff --git a/include/openvpn-plugin.h b/include/openvpn-plugin.h
index 0879f49..9799fcf 100644
--- a/include/openvpn-plugin.h
+++ b/include/openvpn-plugin.h
@@ -143,6 +143,7 @@ typedef void *openvpn_plugin_handle_t;
 #define OPENVPN_PLUGIN_FUNC_SUCCESS  0
 #define OPENVPN_PLUGIN_FUNC_ERROR    1
 #define OPENVPN_PLUGIN_FUNC_DEFERRED 2
+#define OPENVPN_PLUGIN_FUNC_CHALLENGE 3
 
 /*
  * For Windows (needs to be modified for MSVC)
diff --git a/src/openvpn/plugin.c b/src/openvpn/plugin.c
index 83f79e4..83ae351 100644
--- a/src/openvpn/plugin.c
+++ b/src/openvpn/plugin.c
@@ -676,6 +676,7 @@ plugin_call_ssl (const struct plugin_list *pl,
       bool success = false;
       bool error = false;
       bool deferred = false;
+      bool challenge = false;
       
       setenv_del (es, "script_type");
       envp = make_env_array (es, false, &gc);
@@ -701,6 +702,9 @@ plugin_call_ssl (const struct plugin_list *pl,
 	    case OPENVPN_PLUGIN_FUNC_DEFERRED:
 	      deferred = true;
 	      break;
+            case OPENVPN_PLUGIN_FUNC_CHALLENGE:
+              challenge = true;
+              break;
 	    default:
 	      error = true;
 	      break;
@@ -718,6 +722,8 @@ plugin_call_ssl (const struct plugin_list *pl,
 	return OPENVPN_PLUGIN_FUNC_ERROR;
       else if (deferred)
 	return OPENVPN_PLUGIN_FUNC_DEFERRED;
+      else if (challenge)
+        return OPENVPN_PLUGIN_FUNC_CHALLENGE;
     }
 
   return OPENVPN_PLUGIN_FUNC_SUCCESS;
diff --git a/src/openvpn/ssl_verify.c b/src/openvpn/ssl_verify.c
index cac46e9..1532c4b 100644
--- a/src/openvpn/ssl_verify.c
+++ b/src/openvpn/ssl_verify.c
@@ -723,7 +723,7 @@ cleanup:
 
 #ifdef MANAGEMENT_DEF_AUTH
 void
-man_def_auth_set_client_reason (struct tls_multi *multi, const char *client_reason)
+man_def_auth_set_client_reason (struct tls_multi *multi, const char *client_reason, ...)
 {
   if (multi->client_reason)
     {
@@ -731,8 +731,13 @@ man_def_auth_set_client_reason (struct tls_multi *multi, const char *client_reas
       multi->client_reason = NULL;
     }
   if (client_reason && strlen (client_reason))
-    /* FIXME: Last alloc will never be freed */
-    multi->client_reason = string_alloc (client_reason, NULL);
+    {
+      /* FIXME: Last alloc will never be freed */
+     va_list ap;
+     va_start(ap,client_reason);
+     vasprintf(&multi->client_reason,client_reason,ap);
+     va_end(ap);
+   }
 }
 
 static inline unsigned int
@@ -1019,7 +1024,8 @@ verify_user_pass_script (struct tls_session *session, const struct user_pass *up
  * Verify the username and password using a plugin
  */
 static int
-verify_user_pass_plugin (struct tls_session *session, const struct user_pass *up, const char *raw_username)
+verify_user_pass_plugin (struct tls_session *session, const struct user_pass *up, const char *raw_username,
+    const char* state_id)
 {
   int retval = OPENVPN_PLUGIN_FUNC_ERROR;
   struct key_state *ks = &session->key[KS_PRIMARY]; 	   /* primary key */
@@ -1034,6 +1040,9 @@ verify_user_pass_plugin (struct tls_session *session, const struct user_pass *up
       /* setenv incoming cert common name for script */
       setenv_str (session->opt->es, "common_name", session->common_name);
 
+      /* setenv state_id */
+      setenv_str (session->opt->es, "state_id", state_id);
+
       /* setenv client real IP address */
       setenv_untrusted (session);
 
@@ -1126,6 +1135,7 @@ verify_user_pass(struct user_pass *up, struct tls_multi *multi,
 
 #ifdef MANAGEMENT_DEF_AUTH
   int man_def_auth = KMDA_UNDEF;
+  char state_id[128]="";
 
   if (management_enable_def_auth (management))
     man_def_auth = KMDA_DEF;
@@ -1152,7 +1162,35 @@ verify_user_pass(struct user_pass *up, struct tls_multi *multi,
     man_def_auth = verify_user_pass_management (session, up, raw_username);
 #endif
   if (plugin_defined (session->opt->plugins, OPENVPN_PLUGIN_AUTH_USER_PASS_VERIFY))
-    s1 = verify_user_pass_plugin (session, up, raw_username);
+     {
+       if(!strncmp(up->password,"CRV1:",5)){
+	 char new_password[128]="";
+	 char *str;
+	 char *str_ptr=up->password;
+	 printf("-> got '%s'\n",up->password);
+	 /* CRV1  */str=strsep(&str_ptr,":");
+	 /* flags */str=strsep(&str_ptr,":");
+	 if((str=strsep(&str_ptr,":"))){
+	   strcpy(state_id,str);
+	 }
+	 /* user */str=strsep(&str_ptr,":");
+	 if(str_ptr){
+	   strcpy(new_password,str_ptr);
+	 }
+	 strcpy(up->password,new_password);
+	 printf("user: %s\n",up->username);
+	 printf("password: %s\n",up->password);
+	 s1 = verify_user_pass_plugin (session, up, raw_username, state_id);
+       }else{
+	 char *new_state_id=NULL;
+	 char state_id_buff[32];
+	 prng_bytes (state_id_buff, sizeof(state_id_buff));
+	 openvpn_base64_encode(state_id_buff,sizeof(state_id_buff),&new_state_id);
+	 strcpy(state_id,new_state_id);
+	 free(new_state_id);
+	 s1 = verify_user_pass_plugin (session, up, raw_username, state_id);
+       }
+     }
   if (session->opt->auth_user_pass_verify_script)
     s2 = verify_user_pass_script (session, up);
 
@@ -1200,8 +1238,20 @@ verify_user_pass(struct user_pass *up, struct tls_multi *multi,
   else
     {
       msg (D_TLS_ERRORS, "TLS Auth Error: Auth Username/Password verification failed for peer");
+      /* XXX */
+      fprintf(stderr,"GOT %d AS AUTH-RESULT\n",s1);
+      if(s1 == OPENVPN_PLUGIN_FUNC_CHALLENGE)
+	{
+	  char* b64_username=NULL;
+	  openvpn_base64_encode(up->username, strlen(up->username), &b64_username);
+	  man_def_auth_set_client_reason (multi, 
+	      "CRV1:R,E:%s:%s:Please enter token PIN",
+	      state_id,
+	      b64_username);
+	  free(b64_username);
+	  /* XXX */
+	}
     }
-
   gc_free (&gc);
 }
 
diff --git a/src/openvpn/ssl_verify.h b/src/openvpn/ssl_verify.h
index 1d20152..7c48fed 100644
--- a/src/openvpn/ssl_verify.h
+++ b/src/openvpn/ssl_verify.h
@@ -235,7 +235,7 @@ void x509_track_add (const struct x509_track **ll_head, const char *name, int ms
  */
 #ifdef MANAGEMENT_DEF_AUTH
 bool tls_authenticate_key (struct tls_multi *multi, const unsigned int mda_key_id, const bool auth, const char *client_reason);
-void man_def_auth_set_client_reason (struct tls_multi *multi, const char *client_reason);
+void man_def_auth_set_client_reason (struct tls_multi *multi, const char *client_reason, ...);
 #endif
 
 static inline const char *
diff --git a/src/plugins/auth-pam/auth-pam.c b/src/plugins/auth-pam/auth-pam.c
index bd71792..dc948d6 100644
--- a/src/plugins/auth-pam/auth-pam.c
+++ b/src/plugins/auth-pam/auth-pam.c
@@ -44,6 +44,7 @@
 #include <sys/types.h>
 #include <sys/socket.h>
 #include <sys/wait.h>
+#include <time.h>
 #include <fcntl.h>
 #include <signal.h>
 #include <syslog.h>
@@ -61,6 +62,7 @@
 #define RESPONSE_INIT_FAILED      11
 #define RESPONSE_VERIFY_SUCCEEDED 12
 #define RESPONSE_VERIFY_FAILED    13
+#define RESPONSE_VERIFY_CHALLENGE 14
 
 /*
  * Plugin state, used by foreground
@@ -108,10 +110,24 @@ struct user_pass {
   char username[128];
   char password[128];
   char common_name[128];
+  char state_id[128];
 
   const struct name_value_list *name_value_list;
+  int passwd_cnt;
+  int fd;
 };
 
+struct challenge_list {
+  struct challenge_list* next;
+  char *state_id;
+  char *username;
+  pid_t pid;
+  int fd;
+  time_t timestamp;
+};
+
+static struct challenge_list *challenges=NULL;
+
 /* Background process function */
 static void pam_server (int fd, const char *service, int verb, const struct name_value_list *name_value_list);
 
@@ -475,13 +491,18 @@ openvpn_plugin_func_v1 (openvpn_plugin_handle_t handle, const int type, const ch
       const char *username = get_env ("username", envp);
       const char *password = get_env ("password", envp);
       const char *common_name = get_env ("common_name", envp) ? get_env ("common_name", envp) : "";
+      const char *state_id = get_env("state_id", envp);
+
+      if(!state_id)
+	state_id = "";
 
       if (username && strlen (username) > 0 && password)
 	{
 	  if (send_control (context->foreground_fd, COMMAND_VERIFY) == -1
 	      || send_string (context->foreground_fd, username) == -1
 	      || send_string (context->foreground_fd, password) == -1
-             || send_string (context->foreground_fd, common_name) == -1)
+             || send_string (context->foreground_fd, common_name) == -1
+	     || send_string (context->foreground_fd, state_id) == -1)
 	    {
 	      fprintf (stderr, "AUTH-PAM: Error sending auth info to background process\n");
 	    }
@@ -490,6 +511,8 @@ openvpn_plugin_func_v1 (openvpn_plugin_handle_t handle, const int type, const ch
 	      const int status = recv_control (context->foreground_fd);
 	      if (status == RESPONSE_VERIFY_SUCCEEDED)
 		return OPENVPN_PLUGIN_FUNC_SUCCESS;
+	      if(status == RESPONSE_VERIFY_CHALLENGE)
+		return OPENVPN_PLUGIN_FUNC_CHALLENGE;
 	      if (status == -1)
 		fprintf (stderr, "AUTH-PAM: Error receiving auth confirmation from background process\n");
 	    }
@@ -544,10 +567,11 @@ static int
 my_conv (int n, const struct pam_message **msg_array,
 	 struct pam_response **response_array, void *appdata_ptr)
 {
-  const struct user_pass *up = ( const struct user_pass *) appdata_ptr;
+  struct user_pass *up = ( struct user_pass *) appdata_ptr;
   struct pam_response *aresp;
   int i;
   int ret = PAM_SUCCESS;
+  char challenge_buff[256];
 
   *response_array = NULL;
 
@@ -573,6 +597,7 @@ my_conv (int n, const struct pam_message **msg_array,
 
       if (up->name_value_list && up->name_value_list->len > 0)
 	{
+          /* XXX Implement challenge-support */
 	  /* use name/value list match method */
 	  const struct name_value_list *list = up->name_value_list;
 	  int j;
@@ -615,17 +640,57 @@ my_conv (int n, const struct pam_message **msg_array,
       else
 	{
 	  /* use PAM_PROMPT_ECHO_x hints */
+          fprintf (stderr, "AUTH-PAM: BACKGROUND: want msg: '%s'\n",msg->msg);
 	  switch (msg->msg_style)
 	    {
 	    case PAM_PROMPT_ECHO_OFF:
-	      aresp[i].resp = strdup (up->password);
-	      if (aresp[i].resp == NULL)
+              fprintf(stderr,"passwd_cnt=%d\n",up->passwd_cnt);
+              if(up->passwd_cnt++)
+                {
+                  /* second time = challenge */
+                  fprintf(stderr, "AUTH-PAM: BACKGROUND: read challenge\n");
+                  if( -1 != send_control(up->fd,RESPONSE_VERIFY_CHALLENGE))
+                    {
+                      fprintf(stderr, "AUTH-PAM: BACKGROUND: send control succeeded\n");
+                      if( (-1 != recv_string(up->fd,challenge_buff,sizeof(challenge_buff)))
+                          && strlen(challenge_buff))
+                        {
+                      
+                          fprintf(stderr, "AUTH-PAM: BACKGROUND: recv challenge succeeded\n");
+                          aresp[i].resp = strdup (challenge_buff);
+                        }
+                    }
+                }
+              else
+                {
+                  fprintf(stderr, "AUTH-PAM: BACKGROUND: set password\n");
+                  aresp[i].resp = strdup (up->password);
+                }
+              if (aresp[i].resp == NULL)
 		ret = PAM_CONV_ERR;
 	      break;
 
 	    case PAM_PROMPT_ECHO_ON:
-	      aresp[i].resp = strdup (up->username);
-	      if (aresp[i].resp == NULL)
+	      if(1 /*echo_cnt++*/)
+                {
+                  /* second time == challenge */
+                  fprintf(stderr, "AUTH-PAM: BACKGROUND: read challenge (2)\n");
+                  if ( -1 != send_control(up->fd,RESPONSE_VERIFY_CHALLENGE))
+                    {
+                      fprintf(stderr, "AUTH-PAM: BACKGROUND: send control (2)\n");
+                      if (( -1 != recv_string(up->fd,challenge_buff,sizeof(challenge_buff)))
+                          && strlen(challenge_buff))
+                        {
+                          fprintf(stderr, "AUTH-PAM: BACKGROUND: recv challenge (2)\n");
+                          aresp[i].resp = strdup (challenge_buff);
+                        }
+                    }
+                }
+              else
+                {
+                  aresp[i].resp = strdup (up->username);
+                }
+              if (aresp[i].resp == NULL)
 		ret = PAM_CONV_ERR;
 	      break;
 
@@ -650,13 +715,13 @@ my_conv (int n, const struct pam_message **msg_array,
  * Called once for every username/password
  * to be authenticated.
  */
-static int
-pam_auth (const char *service, const struct user_pass *up)
+static void
+pam_auth_bg (const char *service, struct user_pass *up)
 {
   struct pam_conv conv;
   pam_handle_t *pamh = NULL;
   int status = PAM_SUCCESS;
-  int ret = 0;
+  int ret = RESPONSE_VERIFY_FAILED;
   const int name_value_list_provided = (up->name_value_list && up->name_value_list->len > 0);
 
   /* Initialize PAM */
@@ -670,10 +735,10 @@ pam_auth (const char *service, const struct user_pass *up)
       if (status == PAM_SUCCESS)
 	status = pam_acct_mgmt (pamh, 0);
       if (status == PAM_SUCCESS)
-	ret = 1;
+	ret = RESPONSE_VERIFY_SUCCEEDED;
 
       /* Output error message if failed */
-      if (!ret)
+      if (ret==RESPONSE_VERIFY_FAILED)
 	{
 	  fprintf (stderr, "AUTH-PAM: BACKGROUND: user '%s' failed to authenticate: %s\n",
 		   up->username,
@@ -683,7 +748,112 @@ pam_auth (const char *service, const struct user_pass *up)
       /* Close PAM */
       pam_end (pamh, status);      
     }
+  send_control(up->fd,ret);
+}
+
+static int pam_auth(const char* service, struct user_pass* up){
+  pid_t pid;
+  int fds[2];
+  int my_fd;
+  int status;
+  int ret=0;
+  time_t now=time(NULL);
+  struct challenge_list **my_challenge_ptr;
+  struct challenge_list *my_challenge;
+
+  /* remove old stuff */
+  my_challenge_ptr=&challenges;
+  while(*my_challenge_ptr)
+    {
+      if(now - (*my_challenge_ptr)->timestamp > 120)
+        {
+          send_string((*my_challenge_ptr)->fd,"");
+          recv_control((*my_challenge_ptr)->fd);
+          close((*my_challenge_ptr)->fd);
+          fprintf(stderr,"AUTH-PAM: BACKGROUND: waitpid() ...\n");
+          waitpid((*my_challenge_ptr)->pid,&status,0);
+          fprintf(stderr,"AUTH-PAM: BACKGROUND: waitpid() OK\n");
+          free((*my_challenge_ptr)->username);
+          free((*my_challenge_ptr)->state_id);
+          my_challenge=(*my_challenge_ptr);
+          (*my_challenge_ptr)=my_challenge->next;
+          free(my_challenge);
+        }
+      else
+        {
+          my_challenge_ptr=&(*my_challenge_ptr)->next;
+        }
+    }
+
+  /* try to find state_id in challenge - list */
+  my_challenge_ptr=&challenges;
+  while(*my_challenge_ptr)
+    {
+      if(!strcmp((*my_challenge_ptr)->state_id,up->state_id) 
+          && !strcmp((*my_challenge_ptr)->username,up->username))
+        {
+          break;
+        }
+      my_challenge_ptr=&(*my_challenge_ptr)->next;
+    }
 
+  if(!(*my_challenge_ptr))
+    {
+      if (socketpair (PF_UNIX, SOCK_DGRAM, 0, fds) == -1)
+        {
+          return RESPONSE_VERIFY_FAILED;
+        }
+      up->fd = fds[0];
+      my_fd  = fds[1];
+      fcntl (fds[1], F_SETFD, FD_CLOEXEC);
+      if(!(pid = fork()))
+        {
+          pam_auth_bg(service,up);
+          close(up->fd);
+          exit(0);
+        }
+      close(up->fd);
+    }
+  else
+    {
+      /* fill out fd and pid ... */
+      my_fd=(*my_challenge_ptr)->fd;
+      pid=(*my_challenge_ptr)->pid;
+      /* ... send challenge response */
+      send_string(my_fd,up->password); /* XXX check for error */
+      /* and remove challenge-list entry */
+      free((*my_challenge_ptr)->state_id);
+      free((*my_challenge_ptr)->username);
+      my_challenge=(*my_challenge_ptr);
+      (*my_challenge_ptr)=my_challenge->next;
+      free(my_challenge);
+    }
+  switch((ret=recv_control(my_fd)))
+    {
+      case RESPONSE_VERIFY_FAILED:
+      case RESPONSE_VERIFY_SUCCEEDED:
+        fprintf(stderr,"AUTH-PAM: BACKGROUND: received auth result\n");
+        close(my_fd);
+        waitpid(pid,&status,0);
+        break;
+      case RESPONSE_VERIFY_CHALLENGE:
+        fprintf(stderr,"AUTH-PAM: BACKGROUND: received challenge request\n");
+        my_challenge=calloc(1,sizeof(struct challenge_list));
+        my_challenge->pid=pid;
+        my_challenge->state_id=strdup(up->state_id);
+        my_challenge->username=strdup(up->username);
+        my_challenge->fd=my_fd;
+        my_challenge->timestamp=time(NULL);
+        my_challenge->next=challenges;
+        challenges=my_challenge;
+        break;
+      default:
+        fprintf(stderr,"AUTH-PAM: BACKEND: unknown\n");
+        close(my_fd);
+        waitpid(pid,&status,0);
+        ret=RESPONSE_VERIFY_FAILED;
+        break;
+    }
   return ret;
 }
 
@@ -746,7 +916,8 @@ pam_server (int fd, const char *service, int verb, const struct name_value_list
 	case COMMAND_VERIFY:
 	  if (recv_string (fd, up.username, sizeof (up.username)) == -1
 	      || recv_string (fd, up.password, sizeof (up.password)) == -1
-	      || recv_string (fd, up.common_name, sizeof (up.common_name)) == -1)
+	      || recv_string (fd, up.common_name, sizeof (up.common_name)) == -1
+	      || recv_string (fd, up.state_id, sizeof (up.state_id)) == -1)
 	    {
 	      fprintf (stderr, "AUTH-PAM: BACKGROUND: read error on command channel: code=%d, exiting\n",
 		       command);
@@ -763,22 +934,11 @@ pam_server (int fd, const char *service, int verb, const struct name_value_list
 #endif
 	    }
 
-	  if (pam_auth (service, &up)) /* Succeeded */
-	    {
-	      if (send_control (fd, RESPONSE_VERIFY_SUCCEEDED) == -1)
-		{
-		  fprintf (stderr, "AUTH-PAM: BACKGROUND: write error on response socket [2]\n");
-		  goto done;
-		}
-	    }
-	  else /* Failed */
-	    {
-	      if (send_control (fd, RESPONSE_VERIFY_FAILED) == -1)
-		{
-		  fprintf (stderr, "AUTH-PAM: BACKGROUND: write error on response socket [3]\n");
-		  goto done;
-		}
-	    }
+            if (send_control (fd, pam_auth(service, &up)) == -1)
+              {
+                fprintf (stderr, "AUTH-PAM: BACKGROUND: write error on response socket [2]\n");
+                goto done;
+              }
 	  break;
 
 	case COMMAND_EXIT:
